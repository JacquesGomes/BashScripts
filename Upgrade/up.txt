cat filename | grep '1959' -> extracting one line

~ -> home

wc = word count + -l -> case sensitive

grep + -E = enable regular expression such as | (or) : grep -E 'Charles|Roger' 

hash bang = bash is not located at /usr/bash but at /bin/bash so to script needs to put the actual path (to check the path run which bash)

cat *.csv | cut -d "," -f 1-3 | tail -n +2 | sort | uniq -c

cat soccer_scores.csv | cut -d "," -f 2 | tail -n +2 | sort | uniq -c = counts how many times each team has won

cat soccer_scores.csv | sed 's/Cherno/Cherno City/g' | sed s/'Arda'/'Arda United/g' > soccer_scores_edited.csv = search for the first name and swap it for the second one in all ocurrencies

# Echo the first and second ARGV arguments
echo $1 
echo $2

# Echo out the entire ARGV array
echo $@

# Echo out the size of ARGV
echo $#

# Echo the first ARGV argument
echo $1

# Cat all the files
# Then pipe to grep using the first ARGV argument
# Then write out to a named csv using the first ARGV argument
cat hire_data/* | grep "$1" > "$1".csv


variable="X" (to declare)

$variable (to use)

`date`-> shell within the shell

# Get first ARGV into variable
temp_f=$1

# Subtract 32
temp_f2=$(echo "scale=2; $temp_f - 32" | bc)

# Multiply by 5/9
temp_c=$(echo "scale=2; $temp_f2 * 5 / 9" | bc)

# Print the celsius temp
echo $temp_c

declare -a nameofthearray

array=("object1" "object2" ...)

${array[y]} to print the element

array+=("New object")

echo"${array[@]}" print the entire array

echo"${#array[@]}" print the array length

Associative arrays can be used to index using words rather than numbes.

declare -A associative_array = ([name]=Jacques [age]=23 city=[Natal])

echo ${associative_array[name]}

unset X to erase the variables

declare -p variablename (to check if the variable was indeed erased)

for key in "${!person[@]}"
do
  echo "Key: $key, Value: ${person[$key]}"
done

${!person@} for keys

${#person@} for size

# Create variables from the temperature data files
temp_b="$(cat temps/region_B)"
temp_c="$(cat temps/region_C)"

# Create an array with these variables as elements
region_temps=($temp_b $temp_c)

# Call an external program to get average temperature
average_temp=$(echo "scale=2; (${region_temps[0]} + ${region_temps[1]}) / 2" | bc)

# Append average temp to the array
region_temps+=($average_temp)

# Print out the whole array
echo ${region_temps[@]}

# Create variable from first ARGV element
sfile=$1

# Create an IF statement on sfile's contents
if grep -q 'SRVM_' $sfile && grep -q 'vpt' $sfile ; then
	# Move file if matched
	mv $sfile good_logs/
fi

# Use a FOR loop on files in directory
for file in inherited_folder/*.R
do
    # Echo out each file
    echo "$file"
done

# Create a CASE statement matching the first ARGV element
case $1 in
  # Match on all weekdays
  Monday|Tuesday|Wednesday|Thursday|Friday)
  echo "It is a Weekday!";;
  # Match on all weekend days
  Saturday|Sunday)
  echo "It is a Weekend!";;
  # Create a default
  *)
  echo "Not a day!";;
esac
