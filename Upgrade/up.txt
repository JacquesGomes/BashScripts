cat filename | grep '1959' -> extracting one line

~ -> home

wc = word count + -l -> case sensitive

grep + -E = enable regular expression such as | (or) : grep -E 'Charles|Roger' 

hash bang = bash is not located at /usr/bash but at /bin/bash so to script needs to put the actual path (to check the path run which bash)

cat *.csv | cut -d "," -f 1-3 | tail -n +2 | sort | uniq -c

cat soccer_scores.csv | cut -d "," -f 2 | tail -n +2 | sort | uniq -c = counts how many times each team has won

cat soccer_scores.csv | sed 's/Cherno/Cherno City/g' | sed s/'Arda'/'Arda United/g' > soccer_scores_edited.csv = search for the first name and swap it for the second one in all ocurrencies

# Echo the first and second ARGV arguments
echo $1 
echo $2

# Echo out the entire ARGV array
echo $@

# Echo out the size of ARGV
echo $#

# Echo the first ARGV argument
echo $1

# Cat all the files
# Then pipe to grep using the first ARGV argument
# Then write out to a named csv using the first ARGV argument
cat hire_data/* | grep "$1" > "$1".csv


variable="X" (to declare)

$variable (to use)

`date`-> shell within the shell

# Get first ARGV into variable
temp_f=$1

# Subtract 32
temp_f2=$(echo "scale=2; $temp_f - 32" | bc)

# Multiply by 5/9
temp_c=$(echo "scale=2; $temp_f2 * 5 / 9" | bc)

# Print the celsius temp
echo $temp_c

declare -a nameofthearray

array=("object1" "object2" ...)

${array[y]} to print the element

array+=("New object")

echo"${array[@]}" print the entire array

echo"${#array[@]}" print the array length

Associative arrays can be used to index using words rather than numbes.
